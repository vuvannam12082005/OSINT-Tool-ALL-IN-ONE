/*  Jenkinsfile  ‚Äì  qu√©t to√†n b·ªô repo, b·ªè node_modules + venv, tƒÉng heap 2 GB  */

pipeline {
    agent any

    /* Tool ƒë√£ khai trong Manage Jenkins ‚Üí Tools */
    tools {
        nodejs 'Node18'
    }

    environment {
        SCANNER = tool 'SonarScanner'          // ƒë∆∞·ªùng d·∫´n CLI
        SONAR_SCANNER_OPTS = "-Xmx2g"          // tƒÉng heap ƒë·ªÉ tr√°nh OOM
    }

    stages {

        /* 1Ô∏è‚É£ L·∫•y m√£ ngu·ªìn */
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        /* 2Ô∏è‚É£ C√†i npm n·∫øu c√≥ package.json ·ªü g·ªëc repo */
        stage('Install deps') {
            when { expression { fileExists('package.json') } }
            steps {
                sh 'npm ci --ignore-scripts --loglevel=error'
            }
        }

        /* 3Ô∏è‚É£ Ph√¢n t√≠ch SonarQube */
        stage('SonarQube Scan') {
            steps {
                withSonarQubeEnv('SonarQube') {      // server ƒë√£ g√°n credential sonar-token
                    sh """
                        export SONAR_TOKEN=\$SONAR_AUTH_TOKEN
                        ${SCANNER}/bin/sonar-scanner \
                          -Dsonar.projectKey=${env.JOB_BASE_NAME} \
                          -Dsonar.sources=. \
                          -Dsonar.exclusions='**/node_modules/**,**/venv/**,**/.git/**,**/PROJECT1report/**/venv/**' \
                          -Dsonar.login=\$SONAR_AUTH_TOKEN
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'üéâ Scan done! Check SonarQube dashboard.'
        }
        failure {
            echo '‚ùå Scan failed ‚Äì xem Console Output ƒë·ªÉ bi·∫øt chi ti·∫øt.'
        }
    }
}
