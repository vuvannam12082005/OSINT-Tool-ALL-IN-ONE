/*  Jenkinsfile  ‚Äì  qu√©t to√†n b·ªô repository  */
pipeline {
    agent any                     // d√πng executor m·∫∑c ƒë·ªãnh tr√™n controller

    /************* TOOLS *************/
    tools {                       // t√™n ph·∫£i tr√πng Manage ‚Üí Tools
        nodejs 'Node18'           // Node + npm
    }

    /************* ENV **************/
    environment {
        SCANNER = tool 'SonarScanner'   // ƒê∆∞·ªùng d·∫´n CLI
    }

    /************* STAGES ************/
    stages {

        /* 1. L·∫•y code */
        stage('Checkout') {
            steps {
                checkout scm
                echo '‚úÖ Repository checked out'
            }
        }

        /* 2. Debug nhanh c·∫•u tr√∫c repo */
        stage('Debug Info') {
            steps {
                sh 'pwd'
                sh 'ls -la | head'
                sh 'find . -maxdepth 2 -type d | head'
            }
        }

        /* 3. C√†i npm cho web-tool (n·∫øu c√≥) */
        stage('Install Dependencies') {
            when { fileExists('PROJECT1report/web-tool/package.json') }
            steps {
                dir('PROJECT1report/web-tool') {
                    sh 'npm ci --loglevel=error'
                }
                echo '‚úÖ NPM dependencies installed'
            }
        }

        /* 4. Ph√¢n t√≠ch SonarQube cho TO√ÄN B·ªò repo */
        stage('SonarQube Scan') {
            steps {
                withSonarQubeEnv('SonarQube') {

                    script {
                        /* --- c·∫•u h√¨nh linh ho·∫°t --- */
                        def projectKey  = "osint-repo-${env.BUILD_NUMBER}"
                        def projectName = "OSINT Repository Build ${env.BUILD_NUMBER}"
                        def sources     = 'PROJECT1report'     // qu√©t c·∫£ c√¢y d∆∞·ªõi
                        def exclusions  = '**/node_modules/**,' +
                                          '**/venv/**,'        +
                                          '**/.git/**,'        +
                                          '**/__pycache__/**,' +
                                          '**/dist/**,**/build/**,' +
                                          '**/.scannerwork/**,' +
                                          '**/*.min.js,**/*.map'

                        echo "üîë ProjectKey : ${projectKey}"
                        echo "üìÇ Sources     : ${sources}"

                        /* --- ch·∫°y sonar-scanner --- */
                        sh """
                        export SONAR_TOKEN=\$SONAR_AUTH_TOKEN
                        ${SCANNER}/bin/sonar-scanner \\
                          -Dsonar.projectKey=${projectKey} \\
                          -Dsonar.projectName='${projectName}' \\
                          -Dsonar.projectBaseDir=. \\
                          -Dsonar.sources=${sources} \\
                          -Dsonar.exclusions='${exclusions}' \\
                          -Dsonar.login=\$SONAR_AUTH_TOKEN
                        """
                    }
                }
            }
        }
    }

    /************* POST **************/
    post {
        success {
            echo 'üéâ SUCCESS ‚Äì ki·ªÉm tra b√°o c√°o t·∫°i SonarQube.'
        }
        failure {
            echo '‚ùå BUILD FAILED ‚Äì m·ªü Console Output ƒë·ªÉ xem chi ti·∫øt.'
        }
    }
}
