import React, { useEffect, useRef, useState } from 'react';
import ReactDOM from 'react-dom';
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Network, User, Users, ZoomIn, ZoomOut, Maximize, Play, Pause, X, Minimize } from 'lucide-react';

interface NetworkNode {
  id: string;
  name: string;
  level: number;
  children?: NetworkNode[];
}

interface NetworkDiagramProps {
  data: any;
  width?: number;
  height?: number;
}

export const NetworkDiagram: React.FC<NetworkDiagramProps> = ({ 
  data, 
  width = 800, 
  height = 600 
}) => {
  const networkRef = useRef<HTMLDivElement>(null);
  const tooltipRef = useRef<HTMLDivElement>(null);
  const [network, setNetwork] = useState<any>(null);
  const [physicsEnabled, setPhysicsEnabled] = useState(true);
  const [hierarchicalMode, setHierarchicalMode] = useState(false);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const [isViewDragging, setIsViewDragging] = useState(false);

  // Debug log ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
  console.log('üîç NetworkDiagram received data:', data);
  console.log('üîç Data has tree_data:', !!data?.tree_data);
  console.log('üîç Root user:', data?.root_user);
  
  // Th√™m debug chi ti·∫øt cho data structure
  if (data) {
    console.log('üîç Data keys:', Object.keys(data));
    console.log('üîç Data stringify (first 500 chars):', JSON.stringify(data).substring(0, 500));
    if (data.tree_data) {
      console.log('üîç tree_data keys:', Object.keys(data.tree_data));
      console.log('üîç tree_data id:', data.tree_data.id);
      console.log('üîç tree_data children count:', data.tree_data.children?.length || 0);
      console.log('üîç tree_data full structure:', JSON.stringify(data.tree_data, null, 2));
    }
  }

  // Fallback test data ƒë·ªÉ debug
  const testData = {
    "root_user": "phuc.duy.980944",
    "max_layers": 1,
    "crawled_at": "2025-06-02 22:32:18",
    "total_accounts": 2,
    "tree_data": {
      "id": "phuc.duy.980944",
      "profile_url": "https://www.facebook.com/phuc.duy.980944",
      "layer": 0,
      "children": [
        {
          "id": "trung.buiquoc.3154",
          "username": "trung.buiquoc.3154",
          "profile_url": "https://www.facebook.com/trung.buiquoc.3154",
          "layer": 1,
          "title": "B√πi Qu·ªëc Trung",
          "children": [
            {
              "id": "truong.nguyen.207923",
              "username": "truong.nguyen.207923",
              "profile_url": "https://www.facebook.com/truong.nguyen.207923",
              "layer": 2,
              "title": "Tr∆∞·ªùng Nguy·ªÖn",
              "children": []
            }
          ]
        }
      ]
    }
  };

  // S·ª≠ d·ª•ng test data n·∫øu kh√¥ng c√≥ data ho·∫∑c tree_data
  const finalData = (data && data.tree_data) ? data : testData;
  console.log('üéØ Using final data:', finalData === testData ? 'TEST DATA' : 'API DATA');

  useEffect(() => {
    if (!finalData || !finalData.tree_data || !networkRef.current) {
      console.error('‚ùå Missing finalData or tree_data or networkRef');
      return;
    }

    // Th√™m CSS cho tooltip gi·ªëng file HTML
    const styleId = 'network-diagram-styles';
    if (!document.getElementById(styleId)) {
      const style = document.createElement('style');
      style.id = styleId;
      style.textContent = `
        .node-tooltip {
          padding: 10px;
          background-color: #ffffff;
          border-radius: 4px;
          border: 1px solid #d3d3d3;
          box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
          max-width: 300px;
          pointer-events: auto;
          z-index: 10000;
          font-family: Arial, sans-serif;
          font-size: 14px;
          line-height: 1.4;
        }
        
        .node-tooltip-header {
          font-weight: bold;
          font-size: 16px;
          margin-bottom: 8px;
          padding-bottom: 5px;
          border-bottom: 1px solid #eaeaea;
          color: #333;
        }
        
        .node-tooltip-row {
          margin-bottom: 4px;
          color: #333;
        }
        
        .node-tooltip-label {
          font-weight: bold;
          display: inline-block;
          margin-right: 5px;
          color: #333;
        }
        
        .node-tooltip a {
          color: #3498db !important;
          text-decoration: none;
          cursor: pointer;
        }
        
        .node-tooltip a:hover {
          color: #2980b9 !important;
          text-decoration: underline;
        }
      `;
      document.head.appendChild(style);
    }

    const loadVisJS = async () => {
      if (!(window as any).vis) {
        console.log("üîÑ Loading vis-network...");
        const script = document.createElement('script');
        script.src = 'https://visjs.github.io/vis-network/standalone/umd/vis-network.min.js';
        script.onload = () => {
          console.log("‚úÖ Vis-network loaded successfully");
          initializeNetwork();
        };
        script.onerror = () => {
          console.error("‚ùå Failed to load vis-network");
        };
        document.head.appendChild(script);
      } else {
        console.log("‚úÖ Vis-network already loaded");
        initializeNetwork();
      }
    };

    const initializeNetwork = () => {
      const vis = (window as any).vis;
      if (!vis) return;

      // Chu·∫©n h√≥a d·ªØ li·ªáu - x·ª≠ l√Ω nhi·ªÅu tr∆∞·ªùng h·ª£p
      let treeData = finalData.tree_data;
      
      console.log('üîß Raw tree_data:', treeData);
      
      // N·∫øu tree_data l√† array, l·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
      if (Array.isArray(treeData)) {
        console.log('üîß tree_data is array, taking first element');
        treeData = treeData[0];
      }
      
      // N·∫øu v·∫´n kh√¥ng c√≥ id, th·ª≠ t√¨m trong keys kh√°c
      if (!treeData?.id) {
        console.log('üîß No ID found, checking alternative structures...');
        console.log('üîß Available keys:', Object.keys(treeData || {}));
        
        // C√≥ th·ªÉ d·ªØ li·ªáu n·∫±m trong key kh√°c
        for (const key of Object.keys(treeData || {})) {
          if (typeof treeData[key] === 'object' && treeData[key]?.id) {
            console.log(`üîß Found potential tree in key: ${key}`);
            treeData = treeData[key];
            break;
          }
        }
      }

      console.log('üîß Final processed tree_data:', treeData);

      // S·ª≠ d·ª•ng h√†m extractNodesAndEdges gi·ªëng h·ªát file HTML
      const { nodes, edges, tooltips } = extractNodesAndEdges(treeData);
      
      console.log('üéØ Extracted nodes:', nodes.length);
      console.log('üéØ Extracted edges:', edges.length);
      
      if (nodes.length === 0) {
        console.error('‚ùå No nodes extracted from tree data!');
        console.error('‚ùå Tree data structure:', JSON.stringify(treeData, null, 2));
        return;
      }
      
      const visData = {
        nodes: new vis.DataSet(nodes),
        edges: new vis.DataSet(edges)
      };

      const options = {
        nodes: {
          font: { 
            size: 14,
            face: 'Arial',
            color: '#333333'
          },
          borderWidth: 2,
          shadow: {
            enabled: true,
            color: 'rgba(0,0,0,0.5)',
            size: 10,
            x: 5,
            y: 5
          },
          chosen: false
        },
        edges: {
          width: 2,
          shadow: {
            enabled: true,
            color: 'rgba(0,0,0,0.5)',
            size: 10,
            x: 5,
            y: 5
          },
          smooth: {
            enabled: true,
            type: 'dynamic',
            roundness: 0.5
          },
          chosen: false
        },
        interaction: {
          hover: true,
          hideEdgesOnDrag: false,
          multiselect: true,
          tooltipDelay: 200,
          hideNodesOnDrag: false
        },
        physics: {
          enabled: physicsEnabled,
          forceAtlas2Based: {
            gravitationalConstant: -26,
            centralGravity: 0.005,
            springLength: 230,
            springConstant: 0.18,
            damping: 0.4,
            avoidOverlap: 0.5
          },
          maxVelocity: 146,
          minVelocity: 0.75,
          solver: 'forceAtlas2Based',
          stabilization: {
            enabled: true,
            iterations: 2000,
            updateInterval: 25
          },
          timestep: 0.35,
          adaptiveTimestep: true
        },
        layout: {
          improvedLayout: true,
          hierarchical: {
            enabled: hierarchicalMode,
            direction: 'UD',
            sortMethod: 'directed',
            nodeSpacing: 200,
            levelSeparation: 200,
            blockShifting: true,
            edgeMinimization: true,
            parentCentralization: true
          }
        }
      };

      const networkInstance = new vis.Network(networkRef.current, visData, options);
      setNetwork(networkInstance);

      // B·∫≠t animation support
      networkInstance.setOptions({
        configure: {
          enabled: false
        },
        interaction: {
          hover: true,
          hideEdgesOnDrag: false,
          multiselect: true,
          selectConnectedEdges: false
        }
      });

      // Setup events v·ªõi tooltips
      setupNetworkEvents(networkInstance, tooltips, visData);

      // ƒê·∫£m b·∫£o network stabilize tr∆∞·ªõc khi cho ph√©p interactions - gi·ªëng HTML g·ªëc
      networkInstance.once("stabilizationIterationsDone", function() {
        console.log("üéØ Network stabilized - animations ready");
        // Fit v·ªõi animation sau khi stabilize
        setTimeout(() => {
          networkInstance.fit({
            animation: {
              duration: 1000,
              easingFunction: "easeInOutQuad"
            }
          });
        }, 500);
      });

      // ƒê·∫£m b·∫£o fit ho·∫°t ƒë·ªông m∆∞·ª£t m√† sau khi stabilize
      networkInstance.once("afterDrawing", function() {
        console.log("üéØ Network drawing complete - ready for interactions");
      });
    };

    loadVisJS();

    return () => {
      if (network) {
        network.destroy();
      }
    };
  }, [finalData, physicsEnabled, hierarchicalMode]);

  // Effect ƒë·ªÉ c·∫≠p nh·∫≠t network options khi state thay ƒë·ªïi - ƒë·∫£m b·∫£o animations ho·∫°t ƒë·ªông
  useEffect(() => {
    if (network) {
      console.log("üîÑ Updating network options - Physics:", physicsEnabled, "Hierarchical:", hierarchicalMode);
      network.setOptions({
        physics: {
          enabled: physicsEnabled,
          forceAtlas2Based: {
            gravitationalConstant: -26,
            centralGravity: 0.005,
            springLength: 230,
            springConstant: 0.18,
            damping: 0.4,
            avoidOverlap: 0.5
          },
          maxVelocity: 146,
          minVelocity: 0.75,
          solver: 'forceAtlas2Based',
          stabilization: {
            enabled: true,
            iterations: 2000,
            updateInterval: 25
          },
          timestep: 0.35,
          adaptiveTimestep: true
        },
        layout: {
          improvedLayout: true,
          hierarchical: {
            enabled: hierarchicalMode,
            direction: 'UD',
            sortMethod: 'directed',
            nodeSpacing: 200,
            levelSeparation: 200,
            blockShifting: true,
            edgeMinimization: true,
            parentCentralization: true
          }
        }
      });
    }
  }, [network, physicsEnabled, hierarchicalMode]);

  // Effect ƒë·ªÉ handle resize khi fullscreen thay ƒë·ªïi - c·∫£i thi·ªán
  useEffect(() => {
    if (network && networkRef.current) {
      console.log("üîÑ Handling fullscreen resize, isFullscreen:", isFullscreen);
      
      const handleResize = () => {
        if (networkRef.current) {
          const container = networkRef.current;
          const rect = container.getBoundingClientRect();
          
          if (rect.width > 0 && rect.height > 0) {
            console.log("üìê Resizing network to:", rect.width, "x", rect.height);
            network.setSize(rect.width.toString() + 'px', rect.height.toString() + 'px');
            network.redraw();
            
            // Fit sau khi resize
            setTimeout(() => {
              network.fit();
            }, 100);
          }
        }
      };
      
      // Handle resize ngay l·∫≠p t·ª©c
      setTimeout(handleResize, 100);
      
      // Th√™m window resize listener
      window.addEventListener('resize', handleResize);
      
      return () => {
        window.removeEventListener('resize', handleResize);
      };
    }
  }, [isFullscreen, network]);

  // Effect ƒë·ªÉ th√™m ResizeObserver cho container
  useEffect(() => {
    if (network && networkRef.current) {
      console.log("üëÅÔ∏è Setting up ResizeObserver for network container");
      
      const resizeObserver = new ResizeObserver((entries) => {
        for (const entry of entries) {
          const { width, height } = entry.contentRect;
          if (width > 0 && height > 0) {
            console.log("üëÅÔ∏è Container resized detected:", width, "x", height);
            
            // Update network size
            network.setSize(width + 'px', height + 'px');
            network.redraw();
            
            // Fit after a small delay
            setTimeout(() => {
              network.fit();
            }, 50);
          }
        }
      });
      
      resizeObserver.observe(networkRef.current);
      
      return () => {
        resizeObserver.disconnect();
      };
    }
  }, [network]);

  // Helper functions - sao ch√©p ch√≠nh x√°c t·ª´ file HTML
  function removeVietnameseTones(str: string) {
    return str.normalize('NFD')
      .replace(/\p{Diacritic}/gu, '')
      .replace(/ƒë/g, 'd').replace(/ƒê/g, 'D')
      .replace(/\s+/g, '').toLowerCase();
  }

  function extractUserInfo(node: any) {
    let realName = null;
    if (node.about_info) {
      const abouts = [
        node.about_info.about,
        node.about_info.about_work_and_education,
        node.about_info.about_places,
        node.about_info.about_contact_and_basic_info,
        node.about_info.about_details
      ];
      for (const ab of abouts) {
        if (ab && ab.title && ab.title.trim() !== "") {
          realName = ab.title.trim();
          break;
        }
      }
    }
    if (!realName) {
      realName = node.username || node.id;
    }
    let usernameLabel = null;
    let usernameValue = null;
    if (node.username && node.username.trim() !== "") {
      usernameLabel = "Username";
      usernameValue = node.username;
    } else if (/^\d+$/.test(node.id)) {
      usernameLabel = "UID";
      usernameValue = node.id;
    } else {
      usernameLabel = "Username";
      usernameValue = node.id;
    }
    const info = {
      realName,
      usernameLabel,
      usernameValue,
      hometown: "Kh√¥ng c√≥ th√¥ng tin",
      education: "Kh√¥ng c√≥ th√¥ng tin",
      friends: node.friends_count || "0",
      followers: node.followers_count || "0",
      relationship: null,
      profile_url: node.profile_url || "#",
      email: null,
      social: {} as any,
      birthday: null,
      layer: typeof node.layer === 'number' ? node.layer : null,
      currentRelationship: null
    };

    const provinces = [
      'An Giang','B√† R·ªãa - V≈©ng T√†u','B·∫°c Li√™u','B·∫Øc Giang','B·∫Øc K·∫°n','B·∫Øc Ninh','B·∫øn Tre','B√¨nh ƒê·ªãnh','B√¨nh D∆∞∆°ng','B√¨nh Ph∆∞·ªõc','B√¨nh Thu·∫≠n','C√† Mau','Cao B·∫±ng','C·∫ßn Th∆°','ƒê√† N·∫µng','ƒê·∫Øk L·∫Øk','ƒê·∫Øk N√¥ng','ƒêi·ªán Bi√™n','ƒê·ªìng Nai','ƒê·ªìng Th√°p','Gia Lai','H√† Giang','H√† Nam','H√† N·ªôi','H√† Tƒ©nh','H·∫£i D∆∞∆°ng','H·∫£i Ph√≤ng','H·∫≠u Giang','H√≤a B√¨nh','H∆∞ng Y√™n','Hu·∫ø','Kh√°nh H√≤a','Ki√™n Giang','Kon Tum','Lai Ch√¢u','L√¢m ƒê·ªìng','L·∫°ng S∆°n','L√†o Cai','Long An','Nam ƒê·ªãnh','Ngh·ªá An','Ninh B√¨nh','Ninh Thu·∫≠n','Ph√∫ Th·ªç','Ph√∫ Y√™n','Qu·∫£ng B√¨nh','Qu·∫£ng Nam','Qu·∫£ng Ng√£i','Qu·∫£ng Ninh','Qu·∫£ng Tr·ªã','S√≥c TrƒÉng','S∆°n La','T√¢y Ninh','Th√°i B√¨nh','Th√°i Nguy√™n','Thanh H√≥a','Ti·ªÅn Giang','TP. H·ªì Ch√≠ Minh','Tr√† Vinh','Tuy√™n Quang','Vƒ©nh Long','Vƒ©nh Ph√∫c','Y√™n B√°i'
    ];

    if (node.about_info && node.about_info.about && node.about_info.about.content && node.about_info.about.content.general) {
      const general = node.about_info.about.content.general;
      const hometownIndex = general.findIndex((item: string) => item.includes("ƒê·∫øn t·ª´"));
      if (hometownIndex !== -1) {
        info.hometown = general[hometownIndex].replace("ƒê·∫øn t·ª´", "").trim();
      }
      // ∆Øu ti√™n l·∫•y t·ª´ about_work_and_education
      if (node.about_info && node.about_info.about_work_and_education && node.about_info.about_work_and_education.content && node.about_info.about_work_and_education.content.general) {
        const eduArr = node.about_info.about_work_and_education.content.general;
        // L·∫•y c√°c d√≤ng c√≥ t·ª´ 'h·ªçc', 'ƒë·∫°i h·ªçc', ... nh∆∞ng lo·∫°i b·ªè c√°c d√≤ng kh√¥ng mong mu·ªën v√† c√°c d√≤ng ch·ªâ c√≥ m·ªói 'ƒê·∫°i h·ªçc', 'Cao ƒë·∫≥ng', ...
        const eduLines = eduArr.filter((item: string) =>
          /h·ªçc|ƒë·∫°i h·ªçc|h·ªçc t·∫°i|t·ª´ng h·ªçc t·∫°i|ƒë√£ h·ªçc t·∫°i/i.test(item) &&
          !/tr∆∞·ªùng trung h·ªçc|trung h·ªçc|secondary|high school|kh√¥ng c√≥ tr∆∞·ªùng h·ªçc n√†o ƒë·ªÉ hi·ªÉn th·ªã|kh√¥ng c√≥ tr∆∞·ªùng h·ªçc|no school/i.test(item) &&
          !/^(ƒë·∫°i h·ªçc|cao ƒë·∫≥ng|tr∆∞·ªùng trung h·ªçc|trung h·ªçc)$/i.test(item.trim())
        );
        if (eduLines.length > 0) {
          info.education = eduLines.join('; ');
        } else {
          info.education = "Kh√¥ng c√≥ th√¥ng tin";
        }
      }
      // N·∫øu kh√¥ng c√≥, fallback sang about
      if (info.education === 'Kh√¥ng c√≥ th√¥ng tin' && node.about_info && node.about_info.about && node.about_info.about.content && node.about_info.about.content.general) {
        const general = node.about_info.about.content.general;
        const eduLines = general.filter((item: string) =>
          /h·ªçc|ƒë·∫°i h·ªçc|h·ªçc t·∫°i|t·ª´ng h·ªçc t·∫°i|ƒë√£ h·ªçc t·∫°i/i.test(item) &&
          !/tr∆∞·ªùng trung h·ªçc|trung h·ªçc|secondary|high school|kh√¥ng c√≥ tr∆∞·ªùng h·ªçc n√†o ƒë·ªÉ hi·ªÉn th·ªã|kh√¥ng c√≥ tr∆∞·ªùng h·ªçc|no school/i.test(item) &&
          !/^(ƒë·∫°i h·ªçc|cao ƒë·∫≥ng|tr∆∞·ªùng trung h·ªçc|trung h·ªçc)$/i.test(item.trim())
        );
        if (eduLines.length > 0) {
          info.education = eduLines.join('; ');
        } else {
          info.education = "Kh√¥ng c√≥ th√¥ng tin";
        }
      }
    }

    if (info.hometown === 'Kh√¥ng c√≥ th√¥ng tin') {
      let fromStr = null;
      if (node.about_info && node.about_info.about && node.about_info.about.content && node.about_info.about.content.general) {
        const general = node.about_info.about.content.general;
        const fromIdx = general.findIndex((item: string) => item.toLowerCase().includes('ƒë·∫øn t·ª´'));
        if (fromIdx !== -1) {
          fromStr = general[fromIdx].replace(/ƒë·∫øn t·ª´/gi, '').trim();
        }
        if (!fromStr) {
          const liveIdx = general.findIndex((item: string) => /s·ªëng t·∫°i|living in|lives in/i.test(item));
          if (liveIdx !== -1) {
            fromStr = general[liveIdx].replace(/s·ªëng t·∫°i|living in|lives in/gi, '').trim();
          }
        }
      }
      if (!fromStr && node.about_info && node.about_info.about_work_and_education && node.about_info.about_work_and_education.content && node.about_info.about_work_and_education.content.general) {
        const eduArr = node.about_info.about_work_and_education.content.general;
        const hsArr = eduArr.filter((item: string) =>
          (/thpt|trung h·ªçc|high school|chuy√™n|secondary|school/i.test(item)) &&
          !(/ƒë·∫°i h·ªçc|university|college/i.test(item))
        );
        if (hsArr.length > 0) {
          fromStr = hsArr.join(' ');
        }
      }
      if (!fromStr && node.about_info && node.about_info.about_places && node.about_info.about_places.content && node.about_info.about_places.content.general) {
        const places = node.about_info.about_places.content.general.join(' ');
        fromStr = places;
      }
      if (fromStr) {
        const fromStrNorm = removeVietnameseTones(fromStr);
        for (const prov of provinces) {
          const provNorm = removeVietnameseTones(prov);
          if (fromStrNorm.includes(provNorm)) {
            info.hometown = prov;
            break;
          }
        }
      }
    }

    if (node.about_info && node.about_info.about_contact_and_basic_info && node.about_info.about_contact_and_basic_info.content && node.about_info.about_contact_and_basic_info.content.general) {
      const general = node.about_info.about_contact_and_basic_info.content.general;
      for (let i = 0; i < general.length; i++) {
        if (general[i].toLowerCase().includes("email")) {
          if (i > 0 && general[i-1].includes("@")) info.email = general[i-1];
          else if (i < general.length-1 && general[i+1].includes("@")) info.email = general[i+1];
        }
      }
      const socialList = ["instagram", "x", "tiktok", "facebook", "twitter", "youtube", "linkedin"];
      let socialStart = general.findIndex((item: string) => item.toLowerCase().includes("c√°c trang web v√† li√™n k·∫øt m·∫°ng x√£ h·ªôi"));
      if (socialStart !== -1) {
        const invalidLabels = [
          'th√¥ng tin c∆° b·∫£n', 'gi·ªõi t√≠nh', 'nam', 'n·ªØ', 'ng√†y sinh', 'nƒÉm sinh', 'email', 'x', 'instagram', 'facebook', 'tiktok', 'twitter', 'youtube', 'linkedin', 'trang web', 'website', 'zalo', 's·ªë ƒëi·ªán tho·∫°i', 'ƒëi·ªán tho·∫°i', 'li√™n h·ªá', 'th√¥ng tin li√™n h·ªá'
        ];
        for (let i = socialStart + 1; i < general.length-1; i++) {
          for (const mxh of socialList) {
            if (general[i+1].toLowerCase().includes(mxh)) {
              const val = general[i];
              if (!val.includes("@") && !info.social[mxh] && !val.match(/\s/) && !invalidLabels.includes(val.trim().toLowerCase())) {
                info.social[mxh] = val;
              }
            }
          }
        }
      }

      let day = null, month = null, year = null;
      for (let i = 0; i < general.length; i++) {
        if (general[i].toLowerCase().includes("ng√†y sinh")) {
          if (i > 0 && general[i-1].match(/\d{1,2} th√°ng \d{1,2}/)) {
            const [d, m] = general[i-1].split(" th√°ng ");
            day = d.trim();
            month = m.trim();
          } else if (i < general.length-1 && general[i+1].match(/\d{1,2} th√°ng \d{1,2}/)) {
            const [d, m] = general[i+1].split(" th√°ng ");
            day = d.trim();
            month = m.trim();
          }
        }
        if (general[i].toLowerCase().includes("nƒÉm sinh")) {
          if (i > 0 && general[i-1].match(/^\d{4}$/)) year = general[i-1];
          else if (i < general.length-1 && general[i+1].match(/^\d{4}$/)) year = general[i+1];
        }
      }
      if (day && month && year) info.birthday = `${day.padStart(2,'0')}/${month.padStart(2,'0')}/${year}`;
      else if (day && month) info.birthday = `${day.padStart(2,'0')}/${month.padStart(2,'0')}`;
      else if (year) info.birthday = year;

      // T√¨m link locket.cam trong general
      for (let i = 0; i < general.length; i++) {
        if (typeof general[i] === 'string' && general[i].includes('locket.cam')) {
          info.social.locket = general[i];
        }
      }
    }

    if (node.about_info && node.about_info.about_family_and_relationships && node.about_info.about_family_and_relationships.content && node.about_info.about_family_and_relationships.content.general) {
      const rel = node.about_info.about_family_and_relationships.content.general;
      const idx = rel.findIndex((item: string) => item.toLowerCase().includes("m·ªëi quan h·ªá"));
      if (idx !== -1 && rel[idx+1] && !rel[idx+1].toLowerCase().includes("th√†nh vi√™n")) {
        info.relationship = rel[idx+1];
      }
    }

    // L·∫•y m·ªëi quan h·ªá hi·ªán t·∫°i (v√≠ d·ª•: ƒê·ªôc th√¢n, ƒê√£ k·∫øt h√¥n, ...)
    let currentRelationship = null;
    if (node.about_info && node.about_info.about_family_and_relationships && node.about_info.about_family_and_relationships.content && node.about_info.about_family_and_relationships.content.general) {
      const rel = node.about_info.about_family_and_relationships.content.general;
      const idx = rel.findIndex((item: string) => item.toLowerCase().includes('m·ªëi quan h·ªá'));
      if (idx !== -1 && rel[idx+1] && !rel[idx+1].toLowerCase().includes('th√†nh vi√™n')) {
        const val = rel[idx+1].trim();
        if (val && val.toLowerCase() !== 'kh√¥ng c√≥ th√¥ng tin m·ªëi quan h·ªá n√†o ƒë·ªÉ hi·ªÉn th·ªã') {
          currentRelationship = val;
        }
      }
    }
    info.currentRelationship = currentRelationship;
    return info;
  }

  function extractNodesAndEdges(tree: any) {
    const nodes: any[] = [];
    const edges: any[] = [];
    const seenIds = new Set();
    const tooltips: any = {};

    console.log('üå≥ Starting extractNodesAndEdges with tree:', tree);
    console.log('üîç Tree type:', typeof tree);
    console.log('üîç Tree has id:', !!tree?.id);
    console.log('üîç Tree id value:', tree?.id);
    console.log('üîç Tree has children:', !!tree?.children);
    console.log('üîç Tree children length:', tree?.children?.length);

    function traverse(node: any, currentLayer: number) {
      console.log(`üîç Traversing node at layer ${currentLayer}:`, node?.id || 'NO_ID');
      console.log('üîç Node structure:', { id: node?.id, username: node?.username, title: node?.title, hasChildren: !!node?.children });
      
      if (!node || !node.id || seenIds.has(node.id)) {
        console.log(`‚ö†Ô∏è Skipping node: ${!node ? 'null' : !node.id ? 'no ID' : 'already seen'}`);
        return;
      }

      const userInfo = extractUserInfo(node);
      userInfo.layer = currentLayer;

      console.log(`‚úÖ Processing node: ${userInfo.realName} (${node.id}) at layer ${currentLayer}`);

      // T·∫°o tooltip chi ti·∫øt nh∆∞ network.html
      let socialHtml = '';
      const socialLinks: any = {
        instagram: (u: string) => `https://instagram.com/${u}`,
        x: (u: string) => `https://x.com/${u}`,
        tiktok: (u: string) => `https://www.tiktok.com/@${u}`,
        facebook: (u: string) => `https://facebook.com/${u}`,
        twitter: (u: string) => `https://twitter.com/${u}`,
        youtube: (u: string) => `https://youtube.com/@${u}`,
        linkedin: (u: string) => `https://linkedin.com/in/${u}`,
        locket: (u: string) => u // locket.cam links are already full URLs
      };

      for (const [mxh, username] of Object.entries(userInfo.social)) {
        const label = mxh.charAt(0).toUpperCase() + mxh.slice(1);
        if (username && socialLinks[mxh]) {
          if (mxh === 'locket') {
            // Locket links are already full URLs
            socialHtml += `<div class="node-tooltip-row"><span class="node-tooltip-label">${label}:</span> <a href="${username}" target="_blank" style="color: #3498db; text-decoration: none;">${username}</a></div>`;
          } else {
            socialHtml += `<div class="node-tooltip-row"><span class="node-tooltip-label">${label}:</span> <a href="${socialLinks[mxh](username)}" target="_blank" style="color: #3498db; text-decoration: none;">${username}</a></div>`;
          }
        } else if (username) {
          socialHtml += `<div class="node-tooltip-row"><span class="node-tooltip-label">${label}:</span> <span style="color: #3498db;">${username}</span></div>`;
        }
      }

      tooltips[node.id] = `
        <div class="node-tooltip">
          <div class="node-tooltip-header">${userInfo.realName}</div>
          <div class="node-tooltip-row"><span class="node-tooltip-label">${userInfo.usernameLabel}:</span> ${userInfo.usernameValue}</div>
          <div class="node-tooltip-row"><span class="node-tooltip-label">T·∫ßng:</span> ${userInfo.layer}</div>
          <div class="node-tooltip-row"><span class="node-tooltip-label">Qu√™ qu√°n:</span> ${userInfo.hometown}</div>
          <div class="node-tooltip-row"><span class="node-tooltip-label">H·ªçc t·∫°i:</span> ${userInfo.education}</div>
          <div class="node-tooltip-row"><span class="node-tooltip-label">B·∫°n b√®:</span> ${userInfo.friends}</div>
          <div class="node-tooltip-row"><span class="node-tooltip-label">Ng∆∞·ªùi theo d√µi:</span> ${userInfo.followers}</div>
          <div class="node-tooltip-row"><span class="node-tooltip-label">M·ªëi quan h·ªá hi·ªán t·∫°i:</span> ${userInfo.currentRelationship || 'Kh√¥ng c√≥ th√¥ng tin hi·ªÉn th·ªã'}</div>
          <div class="node-tooltip-row"><span class="node-tooltip-label">Email:</span> ${userInfo.email || 'Kh√¥ng c√≥'}</div>
          ${socialHtml}
          <div class="node-tooltip-row"><span class="node-tooltip-label">Ng√†y sinh:</span> ${userInfo.birthday || 'Kh√¥ng c√≥'}</div>
          <div class="node-tooltip-row"><span class="node-tooltip-label">Trang c√° nh√¢n:</span> <a href="${userInfo.profile_url}" target="_blank" style="color: #3498db; text-decoration: none;">M·ªü li√™n k·∫øt</a></div>
        </div>
      `;

      // Sao ch√©p logic t·ª´ file HTML
      const rootUser = finalData.root_user;
      console.log(`üé® Processing node: ${node.id}`);
      console.log(`üé® Root user from data: "${rootUser}"`);
      console.log(`üé® Current layer: ${currentLayer}`);
      console.log(`üé® Node ID type: ${typeof node.id}, Root type: ${typeof rootUser}`);
      
      // C·∫£i thi·ªán logic x√°c ƒë·ªãnh root node
      const isRoot = (currentLayer === 0) || (String(node.id).toLowerCase() === String(rootUser).toLowerCase());
      console.log(`üé® Is root node: ${isRoot}`);
      
      // M√†u s·∫Øc r√µ r√†ng h∆°n
      const nodeColor = isRoot ? '#e74c3c' : '#3498db';  // ƒê·ªè cho root, xanh d∆∞∆°ng cho con
      const borderColor = isRoot ? '#c0392b' : '#2980b9';
      const highlightColor = isRoot ? '#ff6b6b' : '#5dade2';
      const highlightBorder = isRoot ? '#e74c3c' : '#3498db';
      
      // K√≠ch th∆∞·ªõc r√µ r√†ng: root ph·∫£i l·ªõn nh·∫•t
      let nodeSize = 12; // default cho layer 3+
      if (isRoot) {
        nodeSize = 30; // TƒÉng k√≠ch th∆∞·ªõc root l√™n 30
      } else if (currentLayer === 1) {
        nodeSize = 22; // Layer 1
      } else if (currentLayer === 2) {
        nodeSize = 18; // Layer 2
      }
      
      console.log(`üé® Final styling - Color: ${nodeColor}, Size: ${nodeSize}, IsRoot: ${isRoot}`);
      
      nodes.push({
        id: node.id,
        label: node.title || node.username || node.id,
        color: {
          background: nodeColor,
          border: borderColor,
          highlight: {
            background: highlightColor,
            border: highlightBorder
          }
        },
        shape: 'dot',
        size: nodeSize,
        borderWidth: 2,
        shadow: true,
        level: userInfo.layer
      });
      seenIds.add(node.id);
      console.log(`üìä Added node to network: ${userInfo.realName} (${node.id}). Total nodes: ${nodes.length}`);

      if (node.children && node.children.length > 0) {
        console.log(`üë• Node ${node.id} has ${node.children.length} children:`, node.children.map((c: any) => c?.id || 'NO_ID'));
        node.children.forEach((child: any) => {
          if (!seenIds.has(child.id)) {
            console.log(`üîó Creating edge: ${node.id} -> ${child.id}`);
            traverse(child, currentLayer + 1);
            const edgeId = `${node.id}_${child.id}`;
            edges.push({ 
              id: edgeId,
              from: node.id, 
              to: child.id,
              width: 2,
              color: {
                color: '#848484',
                highlight: '#848484',
                hover: '#848484',
                inherit: false
              },
              smooth: {
                type: 'curvedCW',
                roundness: 0.2
              }
            });
            console.log(`üîó Added edge: ${edgeId}. Total edges: ${edges.length}`);
          }
        });
      } else {
        console.log(`üë• Node ${node.id} has no children (${!node.children ? 'undefined' : !Array.isArray(node.children) ? 'not array' : 'empty array'})`);
      }
    }

    traverse(tree, 0);
    console.log(`üéØ Final result: ${nodes.length} nodes, ${edges.length} edges`);
    return { nodes, edges, tooltips };
  }

  const handleZoomIn = () => {
    if (network) {
      // S·ª≠ d·ª•ng method g·ªëc c·ªßa vis-network cho performance t·ªët h∆°n
      network.zoomIn(0.2);
    }
  };

  const handleZoomOut = () => {
    if (network) {
      // S·ª≠ d·ª•ng method g·ªëc c·ªßa vis-network cho performance t·ªët h∆°n
      network.zoomOut(0.2);
    }
  };

  const handleFit = () => {
    if (network) {
      console.log("üéØ Fitting network view");
      
      // Redraw tr∆∞·ªõc khi fit ƒë·ªÉ ƒë·∫£m b·∫£o nodes hi·ªÉn th·ªã
      network.redraw();
      
      // Fit v·ªõi animation sau m·ªôt ch√∫t delay
      setTimeout(() => {
        network.fit({
          animation: {
            duration: 600,
            easingFunction: "easeInOutCubic"
          }
        });
      }, 50);
    }
  };

  const togglePhysics = () => {
    setPhysicsEnabled(!physicsEnabled);
    if (network) {
      console.log("üîÑ Toggling physics to:", !physicsEnabled);
      
      // ƒê∆°n gi·∫£n h√≥a - ch·ªâ toggle enabled state
      network.setOptions({ 
        physics: { 
          enabled: !physicsEnabled
        }
      });

      // Smooth simulation control
      if (!physicsEnabled) {
        // B·∫≠t physics - restart simulation v·ªõi smooth transition
        setTimeout(() => {
          network.startSimulation();
        }, 100);
      } else {
        // T·∫Øt physics - stop simulation smoothly
        network.stopSimulation();
      }
    }
  };

  const toggleHierarchical = () => {
    setHierarchicalMode(!hierarchicalMode);
    if (network) {
      console.log("üîÑ Toggling hierarchical to:", !hierarchicalMode);
      
      // ƒê∆°n gi·∫£n h√≥a layout toggle
      network.setOptions({ 
        layout: { 
          hierarchical: {
            enabled: !hierarchicalMode,
            direction: 'UD',
            sortMethod: 'directed',
            nodeSpacing: 200,
            levelSeparation: 200,
            blockShifting: true,
            edgeMinimization: true,
            parentCentralization: true
          }
        }
      });

      // Smooth fit sau layout change
      setTimeout(() => {
        network.fit({
          animation: {
            duration: 800,
            easingFunction: "easeInOutCubic"
          }
        });
      }, 200);
    }
  };

  const toggleFullscreen = () => {
    setIsFullscreen(!isFullscreen);
    
    // Force complete network re-initialization
    setTimeout(() => {
      if (network && networkRef.current) {
        console.log("üîÑ Force re-initializing network for fullscreen");
        
        // Destroy current network
        network.destroy();
        
        // Re-create network v·ªõi data v√† options hi·ªán t·∫°i
        setTimeout(() => {
          if (networkRef.current) {
            const vis = (window as any).vis;
            if (vis && finalData && finalData.tree_data) {
              console.log("üîÑ Recreating network instance");
              
              // Extract data l·∫°i
              const { nodes, edges, tooltips } = extractNodesAndEdges(finalData.tree_data);
              
              const visData = {
                nodes: new vis.DataSet(nodes),
                edges: new vis.DataSet(edges)
              };

              const options = {
                nodes: {
                  font: { 
                    size: 14,
                    face: 'Arial',
                    color: '#333333'
                  },
                  borderWidth: 2,
                  shadow: {
                    enabled: true,
                    color: 'rgba(0,0,0,0.5)',
                    size: 10,
                    x: 5,
                    y: 5
                  },
                  chosen: false
                },
                edges: {
                  width: 2,
                  shadow: {
                    enabled: true,
                    color: 'rgba(0,0,0,0.5)',
                    size: 10,
                    x: 5,
                    y: 5
                  },
                  smooth: {
                    enabled: true,
                    type: 'dynamic',
                    roundness: 0.5
                  },
                  chosen: false
                },
                interaction: {
                  hover: true,
                  hideEdgesOnDrag: false,
                  multiselect: true,
                  tooltipDelay: 200,
                  hideNodesOnDrag: false
                },
                physics: {
                  enabled: physicsEnabled,
                  forceAtlas2Based: {
                    gravitationalConstant: -26,
                    centralGravity: 0.005,
                    springLength: 230,
                    springConstant: 0.18,
                    damping: 0.4,
                    avoidOverlap: 0.5
                  },
                  maxVelocity: 146,
                  minVelocity: 0.75,
                  solver: 'forceAtlas2Based',
                  stabilization: {
                    enabled: true,
                    iterations: 2000,
                    updateInterval: 25
                  },
                  timestep: 0.35,
                  adaptiveTimestep: true
                },
                layout: {
                  improvedLayout: true,
                  hierarchical: {
                    enabled: hierarchicalMode,
                    direction: 'UD',
                    sortMethod: 'directed',
                    nodeSpacing: 200,
                    levelSeparation: 200,
                    blockShifting: true,
                    edgeMinimization: true,
                    parentCentralization: true
                  }
                }
              };

              // Create new network instance
              const newNetwork = new vis.Network(networkRef.current, visData, options);
              setNetwork(newNetwork);
              
              // Setup all event handlers again
              setupNetworkEvents(newNetwork, tooltips, visData);
              
              // Fit sau khi t·∫°o xong
              setTimeout(() => {
                newNetwork.fit({
                  animation: {
                    duration: 600,
                    easingFunction: "easeInOutCubic"
                  }
                });
              }, 500);
            }
          }
        }, 100);
      }
    }, 300);
  };

  // Helper function ƒë·ªÉ setup network events
  const setupNetworkEvents = (networkInstance: any, tooltips: any, visData: any) => {
    // H√†m t√¨m edge n·ªëi node v·ªõi node cha
    const getParentEdges = (nodeId: string) => {
      return visData.edges.get().filter((edge: any) => edge.to === nodeId);
    };

    // L∆∞u l·∫°i c√°c edge ƒë√£ ƒë·ªïi m√†u ƒë·ªÉ ho√†n nguy√™n
    let highlightedEdges: any[] = [];

    const highlightParentEdges = (nodeId: string) => {
      // Reset edges c≈© tr∆∞·ªõc
      resetParentEdges();
      
      const parentEdges = getParentEdges(nodeId);
      console.log(`üîó Highlighting edges for node ${nodeId}:`, parentEdges);
      
      highlightedEdges = parentEdges.map((edge: any) => {
        const edgeId = edge.id || `${edge.from}_${edge.to}`;
        console.log(`üîó Highlighting edge: ${edgeId}`);
        
        // Update edge v·ªõi m√†u xanh l√° c√¢y ƒë·∫≠m
        visData.edges.update({
          id: edgeId,
          color: { 
            color: '#00ff00', 
            highlight: '#00ff00', 
            hover: '#00ff00',
            inherit: false
          },
          width: 5
        });
        
        return { id: edgeId, originalColor: edge.color, originalWidth: edge.width };
      });
    };

    const resetParentEdges = () => {
      highlightedEdges.forEach(edgeInfo => {
        console.log(`üîó Resetting edge: ${edgeInfo.id}`);
        visData.edges.update({
          id: edgeInfo.id,
          color: { 
            color: '#848484', 
            highlight: '#848484', 
            hover: '#848484',
            inherit: false
          },
          width: 2
        });
      });
      highlightedEdges = [];
    };

    // Setup all events
    networkInstance.on("hoverNode", function(params: any) {
      if (isDragging || isViewDragging) {
        console.log("üö´ Blocking tooltip - drag in progress");
        return;
      }
      
      setTimeout(() => {
        if (isDragging || isViewDragging) {
          console.log("üö´ Blocking tooltip - drag detected in delay");
          return;
        }
        
        const nodeId = params.node;
        highlightParentEdges(nodeId);
        if (tooltips[nodeId] && tooltipRef.current) {
          console.log("‚úÖ Showing tooltip for node:", nodeId);
          tooltipRef.current.innerHTML = tooltips[nodeId];
          tooltipRef.current.style.display = 'block';
          
          // Smart positioning
          tooltipRef.current.style.left = '0px';
          tooltipRef.current.style.top = '0px';
          
          const tooltipRect = tooltipRef.current.getBoundingClientRect();
          const tooltipWidth = tooltipRect.width;
          const tooltipHeight = tooltipRect.height;
          
          const mouseX = params.event.clientX;
          const mouseY = params.event.clientY;
          const viewportWidth = window.innerWidth;
          const viewportHeight = window.innerHeight;
          const margin = 15;
          
          let tooltipX = mouseX + margin;
          let tooltipY = mouseY + margin;
          
          if (tooltipX + tooltipWidth > viewportWidth - margin) {
            tooltipX = mouseX - tooltipWidth - margin;
          }
          
          if (tooltipY + tooltipHeight > viewportHeight - margin) {
            tooltipY = mouseY - tooltipHeight - margin;
          }
          
          if (tooltipX < margin) {
            tooltipX = margin;
          }
          
          if (tooltipY < margin) {
            tooltipY = margin;
          }
          
          tooltipRef.current.style.left = tooltipX + 'px';
          tooltipRef.current.style.top = tooltipY + 'px';
        }
      }, 50);
    });

    networkInstance.on("blurNode", function() {
      resetParentEdges();
      if (tooltipRef.current) {
        tooltipRef.current.style.display = 'none';
      }
    });

    // Drag events
    let dragTimeout: NodeJS.Timeout | null = null;

    networkInstance.on("dragStart", function(params: any) {
      console.log("üî• Drag started");
      setIsDragging(true);
      if (tooltipRef.current) {
        tooltipRef.current.style.display = 'none';
      }
      resetParentEdges();
      
      if (dragTimeout) {
        clearTimeout(dragTimeout);
        dragTimeout = null;
      }
    });

    networkInstance.on("dragging", function(params: any) {
      setIsDragging(true);
      if (tooltipRef.current) {
        tooltipRef.current.style.display = 'none';
      }
      resetParentEdges();
    });

    networkInstance.on("dragEnd", function(params: any) {
      console.log("üî• Drag ended");
      dragTimeout = setTimeout(() => {
        console.log("üî• Allowing tooltip after drag");
        setIsDragging(false);
        dragTimeout = null;
      }, 300);
    });

    networkInstance.on("zoom", function(params: any) {
      if (tooltipRef.current) {
        tooltipRef.current.style.display = 'none';
      }
      resetParentEdges();
    });

    networkInstance.on("press", function(params: any) {
      if (params.nodes.length === 0) {
        setIsViewDragging(true);
        setIsDragging(true);
        if (tooltipRef.current) {
          tooltipRef.current.style.display = 'none';
        }
        resetParentEdges();
      }
    });

    networkInstance.on("release", function(params: any) {
      if (isViewDragging) {
        setIsViewDragging(false);
        setTimeout(() => {
          setIsDragging(false);
        }, 400);
      }
    });

    networkInstance.on("selectNode", function(params: any) {
      const nodeId = params.nodes[0];
      highlightParentEdges(nodeId);
    });

    networkInstance.on("deselectNode", function() {
      resetParentEdges();
    });
  };

  if (!finalData || !finalData.tree_data) {
    const errorContent = (
      <div className="w-full h-full relative bg-gray-900 flex flex-col items-center justify-center">
        <Network className="w-16 h-16 text-gray-500 mb-4" />
        <h3 className="text-xl font-semibold text-white mb-2">No Network Data</h3>
        <p className="text-gray-400 text-center">
          No tree data available to generate network diagram.
        </p>
        
        {/* Debug panel ƒë·ªÉ hi·ªÉn th·ªã data th·ª±c t·∫ø */}
        <div className="mt-4 w-full max-w-2xl">
          <details className="bg-red-900/20 border border-red-500/30 rounded p-3">
            <summary className="text-red-300 cursor-pointer text-sm">üêõ Debug Info (Click to expand)</summary>
            <div className="mt-2 text-xs text-gray-300">
              <p><strong>Data received:</strong> {data ? 'Yes' : 'No'}</p>
              <p><strong>Data type:</strong> {typeof data}</p>
              <p><strong>Data keys:</strong> {data ? Object.keys(data).join(', ') : 'None'}</p>
              <p><strong>Has tree_data:</strong> {data?.tree_data ? 'Yes' : 'No'}</p>
              <p><strong>Root user:</strong> {data?.root_user || 'None'}</p>
              <p><strong>Using test data:</strong> {finalData === testData ? 'Yes' : 'No'}</p>
              {data && (
                <pre className="mt-2 text-xs bg-black/50 p-2 rounded overflow-auto max-h-32">
                  {JSON.stringify(data, null, 2)}
                </pre>
              )}
            </div>
          </details>
        </div>
      </div>
    );

    if (isFullscreen) {
      return (
        <div className="fixed inset-0 z-[9999] bg-gray-900">
          <Button 
            onClick={toggleFullscreen}
            className="absolute top-4 right-4 z-[10000] bg-red-600 hover:bg-red-700 p-2"
            size="sm"
          >
            <X className="w-4 h-4" />
          </Button>
          {errorContent}
        </div>
      );
    }

    return (
      <div className="w-full h-[600px] relative">
        <Button 
          onClick={toggleFullscreen}
          className="absolute top-2 right-2 z-10 bg-blue-600 hover:bg-blue-700 p-2"
          size="sm"
          title="Fullscreen"
        >
          <Maximize className="w-4 h-4" />
        </Button>
        {errorContent}
      </div>
    );
  }

  const networkContent = (
    <div className={`relative bg-white ${isFullscreen ? 'w-full h-full' : 'w-full h-full'}`}>
      {/* Header bar gi·ªëng HTML g·ªëc */}
      <div className="absolute top-0 left-0 right-0 z-20 bg-black/80 text-white p-2 flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <Network className="w-5 h-5 text-blue-400" />
          <span className="font-semibold">Network Diagram</span>
          {isFullscreen && (
            <Badge variant="outline" className="bg-green-500/20 text-green-400 border-green-500/30 text-xs">
              Fullscreen Mode
            </Badge>
          )}
        </div>
        <Badge variant="outline" className="bg-blue-500/20 text-blue-400 border-blue-500/30">
          {finalData.root_user || 'Root User'}
        </Badge>
      </div>

      {/* Controls gi·ªëng HTML g·ªëc */}
      <div className="absolute top-5 right-5 z-30 flex flex-col gap-2 bg-white p-2 rounded shadow-lg">
        <Button size="sm" onClick={handleZoomIn} className="bg-blue-600 hover:bg-blue-700 p-2" title="Zoom In">
          <ZoomIn className="w-4 h-4" />
        </Button>
        <Button size="sm" onClick={handleZoomOut} className="bg-blue-600 hover:bg-blue-700 p-2" title="Zoom Out">
          <ZoomOut className="w-4 h-4" />
        </Button>
        <Button size="sm" onClick={handleFit} className="bg-blue-600 hover:bg-blue-700 p-2" title="Fit">
          <Maximize className="w-4 h-4" />
        </Button>
        <Button 
          size="sm" 
          onClick={togglePhysics} 
          className={`${physicsEnabled ? 'bg-green-600 hover:bg-green-700' : 'bg-red-600 hover:bg-red-700'} p-2`}
          title="Toggle Physics"
        >
          {physicsEnabled ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
        </Button>
        <Button 
          size="sm" 
          onClick={toggleHierarchical} 
          className={`${hierarchicalMode ? 'bg-orange-600 hover:bg-orange-700' : 'bg-gray-600 hover:bg-gray-700'} p-2`}
          title="Toggle Hierarchical"
        >
          H
        </Button>
        {/* Fullscreen toggle button */}
        <Button 
          size="sm" 
          onClick={toggleFullscreen} 
          className={`${isFullscreen ? 'bg-red-600 hover:bg-red-700' : 'bg-purple-600 hover:bg-purple-700'} p-2`}
          title={isFullscreen ? 'Exit Fullscreen' : 'Enter Fullscreen'}
        >
          {isFullscreen ? <Minimize className="w-4 h-4" /> : <Maximize className="w-4 h-4" />}
        </Button>
      </div>

      {/* Network Container - to√†n m√†n h√¨nh nh∆∞ HTML g·ªëc */}
      <div 
        ref={networkRef} 
        style={{ 
          width: '100%', 
          height: isFullscreen ? '100vh' : '100%', 
          border: '1px solid lightgray',
          margin: 0,
          padding: 0
        }}
      />

      {/* Tooltip - gi·ªëng h·ªát HTML g·ªëc */}
      <div 
        ref={tooltipRef}
        id="custom-tooltip"
        style={{
          position: 'absolute',
          display: 'none',
          padding: '10px',
          backgroundColor: 'white',
          borderRadius: '4px',
          border: '1px solid #d3d3d3',
          boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.2)',
          zIndex: 10000,
          maxWidth: '300px',
          pointerEvents: 'auto'
        }}
      />
    </div>
  );

  // Render fullscreen modal n·∫øu isFullscreen = true
  if (isFullscreen) {
    return ReactDOM.createPortal(
      <div className="fixed inset-0 z-[9999] bg-black/70 backdrop-blur-sm flex items-center justify-center p-4">
        <div className="w-full h-full bg-white rounded-lg shadow-2xl overflow-hidden">
          {networkContent}
        </div>
      </div>,
      document.body
    );
  }

  // Render b√¨nh th∆∞·ªùng trong container
  return (
    <div className="w-full h-[600px] relative">
      {networkContent}
    </div>
  );
};