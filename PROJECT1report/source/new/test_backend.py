#!/usr/bin/env python3
"""
OSINT Tool Backend Test Script
T·ª± ƒë·ªông ki·ªÉm tra v√† ch·∫©n ƒëo√°n v·∫•n ƒë·ªÅ backend
"""
import subprocess
import sys
import os
import time
import socket
import threading
import requests
from datetime import datetime

class BackendTester:
    def __init__(self):
        self.results = []
        self.flask_process = None
        self.test_port = 5000
        
    def log(self, message, status="INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        symbols = {"PASS": "‚úì", "FAIL": "‚úó", "INFO": "‚Ñπ", "WARN": "‚ö†"}
        symbol = symbols.get(status, "‚Ä¢")
        log_message = f"[{timestamp}] {symbol} {message}"
        print(log_message)
        self.results.append((status, message))
        
    def check_python_version(self):
        """Ki·ªÉm tra Python version"""
        version = sys.version_info
        if version.major >= 3 and version.minor >= 7:
            self.log(f"Python {version.major}.{version.minor}.{version.micro} - OK", "PASS")
            return True
        else:
            self.log(f"Python {version.major}.{version.minor}.{version.micro} - C·∫ßn Python 3.7+", "FAIL")
            return False
            
    def check_flask_installation(self):
        """Ki·ªÉm tra Flask c√≥ ƒë∆∞·ª£c c√†i ƒë·∫∑t kh√¥ng"""
        try:
            import flask
            self.log(f"Flask {flask.__version__} - ƒê√£ c√†i ƒë·∫∑t", "PASS")
            return True
        except ImportError:
            self.log("Flask ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t", "FAIL")
            return False
            
    def check_flask_cors(self):
        """Ki·ªÉm tra Flask-CORS"""
        try:
            import flask_cors
            self.log("Flask-CORS - ƒê√£ c√†i ƒë·∫∑t", "PASS")
            return True
        except ImportError:
            self.log("Flask-CORS ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t", "FAIL")
            return False
            
    def install_dependencies(self):
        """C√†i ƒë·∫∑t dependencies"""
        self.log("ƒêang c√†i ƒë·∫∑t Flask v√† Flask-CORS...", "INFO")
        try:
            subprocess.check_call([
                sys.executable, '-m', 'pip', 'install', 
                'flask==2.3.3', 'flask-cors==4.0.0', 'requests'
            ], capture_output=True)
            self.log("Dependencies ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng", "PASS")
            return True
        except subprocess.CalledProcessError as e:
            self.log(f"L·ªói c√†i ƒë·∫∑t dependencies: {e}", "FAIL")
            return False
            
    def check_files_exist(self):
        """Ki·ªÉm tra file c·∫ßn thi·∫øt"""
        files_to_check = [
            'api_server.py',
            'crawl/metaspy/main.py',
            'crawl/metaspy'
        ]
        
        all_exist = True
        for file_path in files_to_check:
            if os.path.exists(file_path):
                self.log(f"File/Folder t·ªìn t·∫°i: {file_path}", "PASS")
            else:
                self.log(f"File/Folder KH√îNG t·ªìn t·∫°i: {file_path}", "FAIL")
                all_exist = False
                
        return all_exist
        
    def check_port_available(self):
        """Ki·ªÉm tra port c√≥ s·∫µn kh√¥ng"""
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            sock.bind(('localhost', self.test_port))
            sock.close()
            self.log(f"Port {self.test_port} s·∫µn s√†ng", "PASS")
            return True
        except OSError:
            self.log(f"Port {self.test_port} ƒë√£ b·ªã chi·∫øm", "FAIL")
            return False
            
    def start_flask_server(self):
        """Kh·ªüi ƒë·ªông Flask server"""
        self.log("ƒêang kh·ªüi ƒë·ªông Flask server...", "INFO")
        try:
            self.flask_process = subprocess.Popen(
                [sys.executable, 'api_server.py'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                cwd=os.getcwd()
            )
            
            # ƒê·ª£i server kh·ªüi ƒë·ªông
            time.sleep(3)
            
            if self.flask_process.poll() is None:
                self.log("Flask server ƒë√£ kh·ªüi ƒë·ªông", "PASS")
                return True
            else:
                stdout, stderr = self.flask_process.communicate()
                self.log(f"Flask server b·ªã crash: {stderr.decode()}", "FAIL")
                return False
                
        except Exception as e:
            self.log(f"L·ªói kh·ªüi ƒë·ªông Flask: {e}", "FAIL")
            return False
            
    def test_endpoints(self):
        """Test c√°c endpoint"""
        endpoints_to_test = [
            '/test',
            '/list-api-scripts',
            '/list-friends-data',
            '/list-checkin-files'
        ]
        
        base_url = f"http://localhost:{self.test_port}"
        all_passed = True
        
        for endpoint in endpoints_to_test:
            try:
                # G·ª≠i GET request kh√¥ng c√≥ Content-Type header
                response = requests.get(f"{base_url}{endpoint}", timeout=5)
                if response.status_code == 200:
                    self.log(f"Endpoint {endpoint} - OK", "PASS")
                else:
                    self.log(f"Endpoint {endpoint} - Status {response.status_code}", "FAIL")
                    all_passed = False
            except requests.exceptions.RequestException as e:
                self.log(f"Endpoint {endpoint} - L·ªói k·∫øt n·ªëi: {e}", "FAIL")
                all_passed = False
                
        return all_passed
        
    def test_crawl_endpoint(self):
        """Test endpoint crawl ch√≠nh"""
        url = f"http://localhost:{self.test_port}/crawl-friend-list"
        test_data = {
            "username": "test_user",
            "layers": "0",
            "friends_per_layer": "1",
            "confirm": "y"
        }
        
        try:
            # G·ª≠i POST request v·ªõi proper JSON headers
            headers = {'Content-Type': 'application/json'}
            response = requests.post(url, json=test_data, headers=headers, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if 'stdout' in data or 'stderr' in data:
                    self.log("Endpoint /crawl-friend-list - OK", "PASS")
                    return True
                else:
                    self.log("Endpoint /crawl-friend-list - Response kh√¥ng ƒë√∫ng format", "FAIL")
                    return False
            else:
                self.log(f"Endpoint /crawl-friend-list - Status {response.status_code}", "FAIL")
                return False
        except requests.exceptions.RequestException as e:
            self.log(f"Endpoint /crawl-friend-list - L·ªói: {e}", "FAIL")
            return False
            
    def stop_flask_server(self):
        """D·ª´ng Flask server"""
        if self.flask_process:
            self.flask_process.terminate()
            try:
                self.flask_process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                self.flask_process.kill()
            self.log("Flask server ƒë√£ ƒë∆∞·ª£c d·ª´ng", "INFO")
            
    def print_summary(self):
        """In t√≥m t·∫Øt k·∫øt qu·∫£"""
        print("\n" + "="*60)
        print("T√ìM T·∫ÆT K·∫æT QU·∫¢ TEST")
        print("="*60)
        
        pass_count = len([r for r in self.results if r[0] == "PASS"])
        fail_count = len([r for r in self.results if r[0] == "FAIL"])
        
        print(f"‚úì PASS: {pass_count}")
        print(f"‚úó FAIL: {fail_count}")
        
        if fail_count == 0:
            print("\nüéâ T·∫§T C·∫¢ TEST ƒê·ªÄU PASS! Backend s·∫µn s√†ng ho·∫°t ƒë·ªông!")
            print("\nC√°ch s·ª≠ d·ª•ng:")
            print("1. Ch·∫°y: python api_server.py")
            print("2. M·ªü web v√† test k·∫øt n·ªëi")
        else:
            print(f"\n‚ö†Ô∏è  C√≥ {fail_count} v·∫•n ƒë·ªÅ c·∫ßn kh·∫Øc ph·ª•c:")
            for status, message in self.results:
                if status == "FAIL":
                    print(f"   ‚úó {message}")
                    
            print("\nH∆Ø·ªöNG D·∫™N KH·∫ÆC PH·ª§C:")
            if not any("Flask" in msg for _, msg in self.results if _ == "FAIL"):
                print("‚Ä¢ C√†i ƒë·∫∑t Flask: pip install flask flask-cors")
            if not any("t·ªìn t·∫°i" in msg for _, msg in self.results if _ == "FAIL"):
                print("‚Ä¢ Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n file api_server.py v√† th∆∞ m·ª•c crawl/metaspy")
            if any("Port" in msg for _, msg in self.results if _ == "FAIL"):
                print("‚Ä¢ Thay ƒë·ªïi port trong api_server.py (v√≠ d·ª•: port=5000)")
                
    def run_full_test(self):
        """Ch·∫°y test ƒë·∫ßy ƒë·ªß"""
        print("="*60)
        print("OSINT TOOL BACKEND TESTER")
        print("="*60)
        print("ƒêang ki·ªÉm tra h·ªá th·ªëng...")
        print()
        
        # Ki·ªÉm tra c∆° b·∫£n
        self.check_python_version()
        
        # Ki·ªÉm tra dependencies
        flask_ok = self.check_flask_installation()
        cors_ok = self.check_flask_cors()
        
        if not flask_ok or not cors_ok:
            self.log("ƒêang c√†i ƒë·∫∑t dependencies...", "INFO")
            if self.install_dependencies():
                flask_ok = self.check_flask_installation()
                cors_ok = self.check_flask_cors()
                
        # Ki·ªÉm tra file
        self.check_files_exist()
        
        # Ki·ªÉm tra port
        port_ok = self.check_port_available()
        
        if flask_ok and cors_ok and port_ok:
            # Test server
            if self.start_flask_server():
                time.sleep(2)
                self.test_endpoints()
                self.test_crawl_endpoint()
                self.stop_flask_server()
        
        self.print_summary()

def main():
    tester = BackendTester()
    try:
        tester.run_full_test()
    except KeyboardInterrupt:
        print("\n\nTest b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng")
        tester.stop_flask_server()
    except Exception as e:
        print(f"\nL·ªói kh√¥ng mong mu·ªën: {e}")
        tester.stop_flask_server()

if __name__ == "__main__":
    main() 